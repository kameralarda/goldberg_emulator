name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  dependencies:
    runs-on: ubuntu-latest
    container: tianon/steamos
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          test -e ./protobuf/prefix && exit 0
          apt update && apt -y install gcc-4.9 g++-4.9 git autotools-dev automake libtool g++-4.9-multilib gcc-4.9-multilib build-essential

      - name: Build Protobuf
        run: |
          export BASE_PREFIX_PATH=$(pwd)
          mkdir deps && cd deps
          git clone --branch 21.x https://github.com/protocolbuffers/protobuf.git
          cd protobuf
          sh autogen.sh
          ./configure "CC=gcc-4.9 -m32" "CXX=g++-4.9 -m32" CPPFLAGS="-fPIC -Ofast" CXXFLAGS="-fPIC -Ofast" --prefix=$BASE_PREFIX_PATH/protobuf/prefix_x86/ --disable-shared --enable-static
          make -j$(nproc) install
          make clean
          ./configure "CC=gcc-4.9" "CXX=g++-4.9" "CPPFLAGS=-fPIC -Ofast" "CXXFLAGS=-fPIC -Ofast" --prefix=$BASE_PREFIX_PATH/protobuf/prefix/ --disable-shared --enable-static
          make -j$(nproc) install

      - name: Cache Protobuf Build
        uses: actions/cache@v3
        with:
          path: protobuf/
          key: protobuf-static-steamos-cache

  build_steamos:
    runs-on: ubuntu-latest
    container: tianon/steamos
    needs: dependencies
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          apt update && apt -y install gcc-4.9 g++-4.9 git libtool g++-4.9-multilib gcc-4.9-multilib

      - name: Build Project
        run: |
          ls -lah
          uname -a
          sed -i 's/^g++ /g++-4.9 /g' build_steamos.sh
          sed -i 's|../protobuf/prefix|./protobuf/prefix|g' build_steamos.sh
          sh build_steamos.sh

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: linux-build
          path: linux/

  build_windows:
    runs-on: ubuntu-latest
    container: fedora:35
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          dnf -y install wine wget p7zip sed dos2unix python

      - name: Build Windows Version
        run: |
          unix2dos *.txt
          unix2dos files_example/*.txt files_example/*/*.txt
          sed -i 's|..\\vcpkg\\installed\\|.\\protobuf_|g' build_set_protobuf_directories.bat
          wget 'https://gitlab.com/Mr_Goldberg/goldberg_emulator/uploads/48db8f434a193aae872279dc4f5dde6a/sdk_standalone.7z'
          wget 'https://gitlab.com/Mr_Goldberg/goldberg_emulator/uploads/0119304e030098b4821d73170fe52084/protobuf_x64-windows-static.7z'
          wget 'https://gitlab.com/Mr_Goldberg/goldberg_emulator/uploads/4185a97ab363ddc1859127e59ec68581/protobuf_x86-windows-static.7z'
          7za x protobuf_x86-windows-static.7z -oprotobuf_x86-windows-static
          7za x protobuf_x64-windows-static.7z -oprotobuf_x64-windows-static
          7za x sdk_standalone.7z -osdk_standalone
          export WINEDEBUG=-all
          wine cmd /c build_win_release_test.bat

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: windows-build
          path: release/

  deploy:
    runs-on: ubuntu-latest
    needs: [build_windows, build_steamos]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          sudo apt update
          sudo apt install -y tree git

      - name: Prepare Deployment
        run: |
          mkdir -p release/source_code
          git bundle create release/source_code/source_code.bundle --all
          echo "This is a git bundle of the full repo. To use: git clone source_code.bundle --branch master" > release/source_code/Readme.txt
          mv linux release/
          shopt -s extglob
          rm -rf .g*
          rm -rf !(release)
          mv release/* ./
          rm -rf release
          echo $GITHUB_RUN_ID > job_id
          tree

      - name: Upload Deployment Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: deployment-package
          path: ./

  pages:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Deploy GitHub Pages
        run: |
          DEPLOY_ALL_JOBID=$(cat job_id)
          mkdir public
          cat website/template.html | sed "s|X_LATEST_BUILD_URL_X|https://github.com/<YOUR_REPO>/actions/runs/$DEPLOY_ALL_JOBID|g" > public/index.html
          sed -i "s|X_LATEST_BUILD_COMMIT_HASH_X|$GITHUB_SHA|g" public/index.html

      - name: Upload Pages Artifact
        uses: actions/upload-artifact@v3
        with:
          name: github-pages
          path: public/

      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v2
